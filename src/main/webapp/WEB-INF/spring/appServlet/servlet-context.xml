<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2017 The MIT Internet Trust Consortium
   
    Portions copyright 2011-2013 The MITRE Corporation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
      http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<mvc:interceptors>
		<!-- Inject the UserInfo into the current context -->
		<bean id="userInfoInterceptor" class="org.mitre.openid.connect.web.UserInfoInterceptor" />
	</mvc:interceptors>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<context:component-scan base-package="org.mitre.web" />

	<security:global-method-security pre-post-annotations="enabled" proxy-target-class="true" authentication-manager-ref="authenticationManager"/>

	<security:http auto-config="false" use-expressions="true"
		disable-url-rewriting="true" entry-point-ref="authenticationEntryPoint"
		pattern="/**">

		<security:custom-filter before="PRE_AUTH_FILTER" ref="openIdConnectAuthenticationFilter" />

		<security:logout />

	</security:http>

	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<constructor-arg name="loginFormUrl" value="/openid_connect_login" />
	</bean>

	<security:authentication-manager alias="authenticationManager">
		<!-- This wires the OIDC authentication provider into the system -->
		<security:authentication-provider ref="openIdConnectAuthenticationProvider" />
	</security:authentication-manager>

	<bean id="openIdConnectAuthenticationProvider" class="org.mitre.openid.connect.client.OIDCAuthenticationProvider">

	<!-- This default provider will set everyone to have the role "USER". To change this 
		 behavior, wire in a custom OIDCAuthoritiesMapper here  -->
<!-- 
		<property name="authoritiesMapper">
			<bean class="org.mitre.openid.connect.client.NamedAdminAuthoritiesMapper">
				<property name="admins" ref="namedAdmins" />
			</bean>
		</property>
-->

	</bean>

	<util:set id="namedAdmins" value-type="org.mitre.openid.connect.client.SubjectIssuerGrantedAuthority">
		<!-- 
			This is an example of how to set up a user as an administrator: they'll be given ROLE_ADMIN in addition to ROLE_USER.
			Note that having an administrator role on the IdP doesn't grant administrator access on this client.
			
			These are values from the demo "openid-connect-server-webapp" project of MITREid Connect.
		-->
		<!-- 
		<bean class="org.mitre.openid.connect.client.SubjectIssuerGrantedAuthority">
			<constructor-arg name="subject" value="90342.ASDFJWFA" />
			<constructor-arg name="issuer" value="http://localhost:8080/openid-connect-server-webapp/" />
		</bean>
		-->
	</util:set>


	<!-- 
	  -
	  - Create and configure the MITREid Connect client filter
	  -	
	  -->
	<bean id="openIdConnectAuthenticationFilter" class="org.mitre.openid.connect.client.OIDCAuthenticationFilter">
	
		<!-- This sets the RP to talk only to one IdP -->
		<property name="issuerService">
			<bean class="org.mitre.openid.connect.client.service.impl.StaticSingleIssuerService" id="staticIssuerService">
				<property name="issuer" value="https://mitreid.org/" />
			</bean>
		</property>
		
		<!-- This tells the RP to dynamically load the IdP's configuration over the web -->
		<property name="serverConfigurationService">
			<bean class="org.mitre.openid.connect.client.service.impl.DynamicServerConfigurationService" id="dynamicServerConfigurationService" />
		</property>
		
		<!-- This tells the RP how to talk to the IdP -->
		<property name="clientConfigurationService">
			<bean class="org.mitre.openid.connect.client.service.impl.StaticClientConfigurationService" id="staticClientConfigurationService">
				<property name="clients">
					<map>
						<!-- This tells the client to use this configuration when talking to the IdP -->
						<entry key="https://mitreid.org/">
							<bean class="org.mitre.oauth2.model.RegisteredClient">
							
								<!-- This is the client's unique identifier at the IdP -->
								<property name="clientId" value="login-gov-test-client-swa" />
								
								<!-- This tells the client to use a signed JWT to authenticate itself
								     note: your keys need to be registered with the IdP -->
								<property name="tokenEndpointAuthMethod" value="PRIVATE_KEY" />
								
								<!-- This tells the client to ask for the standard OpenID Connect scopes -->
								<property name="scope">
									<set value-type="java.lang.String">
										<value>openid</value>
										<value>email</value>
										<value>address</value>
										<value>profile</value>
										<value>phone</value>
									</set>
								</property>
								
								<!-- This tells the client which redirect URIs are valid, configured above.
								     note: it will use only the first one in the set. -->
								<property name="redirectUris">
									<set>
										<value>http://localhost:8080/simple-web-app/openid_connect_login</value>
									</set>
								</property>
							</bean>
						</entry>
					</map>
		  		</property>
			</bean>
		</property>
		
		<!-- This tells the client to send no additional options -->
		<property name="authRequestOptionsService">
			<bean class="org.mitre.openid.connect.client.service.impl.StaticAuthRequestOptionsService" id="staticAuthRequestOptionsService" />
		</property>
		
		<!-- This tells the client to use a plain HTTP redirect to send its requests -->
		<property name="authRequestUrlBuilder">
			<bean class="org.mitre.openid.connect.client.service.impl.PlainAuthRequestUrlBuilder" id="plainAuthRequestUrlBuilder" />
		</property>

		<!-- This wires in the authentication manager to the filter -->
		<property name="authenticationManager" ref="authenticationManager" />

	</bean>


	<!-- 
		This creates a component to fetch the public keys of the IdP
	-->
	
	<bean id="validatorCache" class="org.mitre.jwt.signer.service.impl.JWKSetCacheService" />
	
	<!-- 
		This loads the public and private keys for this client from the
	 	JWKS file.
	 -->
	<bean id="defaultSignerService" class="org.mitre.jwt.signer.service.impl.DefaultJWTSigningAndValidationService">
		<constructor-arg name="keyStore">
			<bean id="defaultKeyStore" class="org.mitre.jose.keystore.JWKSetKeyStore">

				<!-- This is the path to the client's public and private keys, in JSON Web Key Set format -->
				<property name="location" value="classpath:keystore.jwks" />

			</bean>
		</constructor-arg>
		
		<!-- This is the key ID of the key used to sign the client's outgoing requests. This key
	 	     must exist in the keystore configured above -->
		<property name="defaultSignerKeyId" value="rsa-test-key" />
 		<property name="defaultSigningAlgorithmName" value="RS256" />
	</bean>
 		 
</beans>
